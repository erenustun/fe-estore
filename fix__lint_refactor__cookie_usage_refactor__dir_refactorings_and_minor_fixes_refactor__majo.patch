Subject: [PATCH] fix: lint
refactor: cookie usage
refactor: dir refactorings and minor fixes
refactor: major directory refactoring
refactor: moved lib to shared dir
fix: lint
refactor: moved router util to shared dir
refactor: moved util to shared dir
refactor: moved config to shared directory
fix: package-lock.json
refactor: model directory
fix: missing export for select + fielderror component
feat: models from backend
refactor: utilizing getCookieData in getBearerToken
refactor: select field
feat: intl support
feat: select and field error component
fix: missing route.config.ts
---
Index: next.config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/next.config.js b/next.config.js
--- a/next.config.js	(revision 7bb2e11b074c501edf24bf7bca8986f37d4072c8)
+++ b/next.config.js	(revision 7970feba00df62e547c3d844b113ab4c8c63b234)
@@ -13,6 +13,10 @@
       }
     ]
   },
+  i18n: {
+    locales: ['en'],
+    defaultLocale: 'en'
+  },
   webpack: (config) => {
     config.module.rules.push({
       test: /\.(graphql|gql)$/,
Index: package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package-lock.json b/package-lock.json
--- a/package-lock.json	(revision 7bb2e11b074c501edf24bf7bca8986f37d4072c8)
+++ b/package-lock.json	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
@@ -25,6 +25,7 @@
         "react-cookie": "^4.1.1",
         "react-dom": "18.2.0",
         "react-hook-form": "^7.45.0",
+        "react-intl": "^6.4.4",
         "sass": "^1.63.4",
         "styled-components": "^6.0.0-rc.3",
         "tailwindcss": "3.3.2",
@@ -2117,6 +2118,92 @@
         "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       }
     },
+    "node_modules/@formatjs/ecma402-abstract": {
+      "version": "1.17.0",
+      "resolved": "https://registry.npmjs.org/@formatjs/ecma402-abstract/-/ecma402-abstract-1.17.0.tgz",
+      "integrity": "sha512-6ueQTeJZtwKjmh23bdkq/DMqH4l4bmfvtQH98blOSbiXv/OUiyijSW6jU22IT8BNM1ujCaEvJfTtyCYVH38EMQ==",
+      "dependencies": {
+        "@formatjs/intl-localematcher": "0.4.0",
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@formatjs/fast-memoize": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/@formatjs/fast-memoize/-/fast-memoize-2.2.0.tgz",
+      "integrity": "sha512-hnk/nY8FyrL5YxwP9e4r9dqeM6cAbo8PeU9UjyXojZMNvVad2Z06FAVHyR3Ecw6fza+0GH7vdJgiKIVXTMbSBA==",
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@formatjs/icu-messageformat-parser": {
+      "version": "2.6.0",
+      "resolved": "https://registry.npmjs.org/@formatjs/icu-messageformat-parser/-/icu-messageformat-parser-2.6.0.tgz",
+      "integrity": "sha512-yT6at0qc0DANw9qM/TU8RZaCtfDXtj4pZM/IC2WnVU80yAcliS3KVDiuUt4jSQAeFL9JS5bc2hARnFmjPdA6qw==",
+      "dependencies": {
+        "@formatjs/ecma402-abstract": "1.17.0",
+        "@formatjs/icu-skeleton-parser": "1.6.0",
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@formatjs/icu-skeleton-parser": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/@formatjs/icu-skeleton-parser/-/icu-skeleton-parser-1.6.0.tgz",
+      "integrity": "sha512-eMmxNpoX/J1IPUjPGSZwo0Wh+7CEvdEMddP2Jxg1gQJXfGfht/FdW2D5XDFj3VMbOTUQlDIdZJY7uC6O6gjPoA==",
+      "dependencies": {
+        "@formatjs/ecma402-abstract": "1.17.0",
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@formatjs/intl": {
+      "version": "2.9.0",
+      "resolved": "https://registry.npmjs.org/@formatjs/intl/-/intl-2.9.0.tgz",
+      "integrity": "sha512-Ym0trUoC/VO6wQu4YHa0H1VR2tEixFRmwZgADkDLm7nD+vv1Ob+/88mUAoT0pwvirFqYKgUKEwp1tFepqyqvVA==",
+      "dependencies": {
+        "@formatjs/ecma402-abstract": "1.17.0",
+        "@formatjs/fast-memoize": "2.2.0",
+        "@formatjs/icu-messageformat-parser": "2.6.0",
+        "@formatjs/intl-displaynames": "6.5.0",
+        "@formatjs/intl-listformat": "7.4.0",
+        "intl-messageformat": "10.5.0",
+        "tslib": "^2.4.0"
+      },
+      "peerDependencies": {
+        "typescript": "^4.7 || 5"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@formatjs/intl-displaynames": {
+      "version": "6.5.0",
+      "resolved": "https://registry.npmjs.org/@formatjs/intl-displaynames/-/intl-displaynames-6.5.0.tgz",
+      "integrity": "sha512-sg/nR8ILEdUl+2sWu6jc1nQ5s04yucGlH1RVfatW8TSJ5uG3Yy3vgigi8NNC/BuhcncUNPWqSpTCSI1hA+rhiw==",
+      "dependencies": {
+        "@formatjs/ecma402-abstract": "1.17.0",
+        "@formatjs/intl-localematcher": "0.4.0",
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@formatjs/intl-listformat": {
+      "version": "7.4.0",
+      "resolved": "https://registry.npmjs.org/@formatjs/intl-listformat/-/intl-listformat-7.4.0.tgz",
+      "integrity": "sha512-ifupb+balZUAF/Oh3QyGRqPRWGSKwWoMPR0cYZEG7r61SimD+m38oFQqVx/3Fp7LfQFF11m7IS+MlxOo2sKINA==",
+      "dependencies": {
+        "@formatjs/ecma402-abstract": "1.17.0",
+        "@formatjs/intl-localematcher": "0.4.0",
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@formatjs/intl-localematcher": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/@formatjs/intl-localematcher/-/intl-localematcher-0.4.0.tgz",
+      "integrity": "sha512-bRTd+rKomvfdS4QDlVJ6TA/Jx1F2h/TBVO5LjvhQ7QPPHp19oPNMIum7W2CMEReq/zPxpmCeB31F9+5gl/qtvw==",
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
     "node_modules/@graphql-typed-document-node/core": {
       "version": "3.2.0",
       "resolved": "https://registry.npmjs.org/@graphql-typed-document-node/core/-/core-3.2.0.tgz",
@@ -4766,6 +4853,17 @@
         "node": ">= 0.4"
       }
     },
+    "node_modules/intl-messageformat": {
+      "version": "10.5.0",
+      "resolved": "https://registry.npmjs.org/intl-messageformat/-/intl-messageformat-10.5.0.tgz",
+      "integrity": "sha512-AvojYuOaRb6r2veOKfTVpxH9TrmjSdc5iR9R5RgBwrDZYSmAAFVT+QLbW3C4V7Qsg0OguMp67Q/EoUkxZzXRGw==",
+      "dependencies": {
+        "@formatjs/ecma402-abstract": "1.17.0",
+        "@formatjs/fast-memoize": "2.2.0",
+        "@formatjs/icu-messageformat-parser": "2.6.0",
+        "tslib": "^2.4.0"
+      }
+    },
     "node_modules/is-array-buffer": {
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.2.tgz",
@@ -6048,6 +6146,32 @@
         "react": "^16.8.0 || ^17 || ^18"
       }
     },
+    "node_modules/react-intl": {
+      "version": "6.4.4",
+      "resolved": "https://registry.npmjs.org/react-intl/-/react-intl-6.4.4.tgz",
+      "integrity": "sha512-/C9Sl/5//ohfkNG6AWlJuf4BhTXsbzyk93K62A4zRhSPANyOGpKZ+fWhN+TLfFd5YjDUHy+exU/09y0w1bO4Xw==",
+      "dependencies": {
+        "@formatjs/ecma402-abstract": "1.17.0",
+        "@formatjs/icu-messageformat-parser": "2.6.0",
+        "@formatjs/intl": "2.9.0",
+        "@formatjs/intl-displaynames": "6.5.0",
+        "@formatjs/intl-listformat": "7.4.0",
+        "@types/hoist-non-react-statics": "^3.3.1",
+        "@types/react": "16 || 17 || 18",
+        "hoist-non-react-statics": "^3.3.2",
+        "intl-messageformat": "10.5.0",
+        "tslib": "^2.4.0"
+      },
+      "peerDependencies": {
+        "react": "^16.6.0 || 17 || 18",
+        "typescript": "^4.7 || 5"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/react-is": {
       "version": "16.13.1",
       "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package.json b/package.json
--- a/package.json	(revision 7bb2e11b074c501edf24bf7bca8986f37d4072c8)
+++ b/package.json	(revision 7970feba00df62e547c3d844b113ab4c8c63b234)
@@ -28,6 +28,7 @@
     "react-cookie": "^4.1.1",
     "react-dom": "18.2.0",
     "react-hook-form": "^7.45.0",
+    "react-intl": "^6.4.4",
     "sass": "^1.63.4",
     "styled-components": "^6.0.0-rc.3",
     "tailwindcss": "3.3.2",
Index: pages/_app.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/_app.tsx b/pages/_app.tsx
--- a/pages/_app.tsx	(revision 7bb2e11b074c501edf24bf7bca8986f37d4072c8)
+++ b/pages/_app.tsx	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
@@ -1,31 +1,46 @@
 import '@/public/styles/globals.css'
 import { Inter } from 'next/font/google'
 import type { AppProps } from 'next/app'
-import { Header } from '@components/Header'
-import StyledComponentsRegistry from '@/src/lib/registry'
+import { StyledComponentsRegistry } from '@shared/lib'
 import { ApolloProvider } from '@apollo/client'
-import { apolloClient } from '@src/config/apollo-client.config'
-import { Layout } from '@components/Layout/Layout'
-import { hasHydrated } from '@util/has-hydrated.hook'
-import { CookiesProvider } from 'react-cookie'
-import { Footer } from '@components/Footer'
+import { hasHydrated } from '@shared/hook'
+import { CookiesProvider, useCookies } from 'react-cookie'
+import { useRouter } from 'next/router'
+import { useEffect } from 'react'
+import Eng from '@shared/lib/intl/en.json'
+import { IntlProvider } from 'react-intl'
+import { apolloClient } from '@shared/config'
+import { Layout, Footer, Header } from '@component'
 
 const inter = Inter({ subsets: ['latin'] })
 
 export default function App({ Component, pageProps }: AppProps) {
+  const router = useRouter()
+  const { locale } = router
   const hasMounted = hasHydrated()
+  const [cookies, setCookie] = useCookies(['locale'])
+
+  useEffect(() => {
+    setCookie('locale', locale ? locale.split('-')[0] : 'en')
+  }, [locale])
 
   return hasMounted ? (
     <CookiesProvider>
-      <StyledComponentsRegistry>
-        <ApolloProvider client={apolloClient}>
-          <Layout className={inter.className}>
-            <Header />
-            <Component {...pageProps} />
-            <Footer />
-          </Layout>
-        </ApolloProvider>
-      </StyledComponentsRegistry>
+      <IntlProvider
+        locale={cookies['locale'] as string}
+        messages={Eng}
+        onError={() => null}
+      >
+        <StyledComponentsRegistry>
+          <ApolloProvider client={apolloClient}>
+            <Layout className={inter.className}>
+              <Header />
+              <Component {...pageProps} />
+              <Footer />
+            </Layout>
+          </ApolloProvider>
+        </StyledComponentsRegistry>
+      </IntlProvider>
     </CookiesProvider>
   ) : null
 }
Index: src/util/api.util.ts
===================================================================
diff --git a/src/util/api.util.ts b/src/util/api.util.ts
deleted file mode 100644
--- a/src/util/api.util.ts	(revision cc151264a276f0535c9ac2af911aefef21617584)
+++ /dev/null	(revision cc151264a276f0535c9ac2af911aefef21617584)
@@ -1,6 +0,0 @@
-export const getBearerToken = () => {
-  const jwt =
-    typeof localStorage !== 'undefined' && document.cookie.split('=')[1]
-  if (typeof jwt !== 'undefined') return jwt
-  return null
-}
Index: src/config/apollo-client.config.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/config/apollo-client.config.ts b/shared/config/apollo-client.config.ts
rename from src/config/apollo-client.config.ts
rename to shared/config/apollo-client.config.ts
--- a/src/config/apollo-client.config.ts	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/config/apollo-client.config.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,6 +1,6 @@
 import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client'
 import { setContext } from '@apollo/client/link/context'
-import { getBearerToken } from '@util/api.util'
+import { getBearerToken } from '@shared/util'
 
 const httpLink = createHttpLink({
   uri:
Index: shared/config/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/config/index.ts b/shared/config/index.ts
new file mode 100644
--- /dev/null	(revision 523a46efa351c8d7da6849e97aaef906988802dd)
+++ b/shared/config/index.ts	(revision 523a46efa351c8d7da6849e97aaef906988802dd)
@@ -0,0 +1,3 @@
+export * from './apollo-client.config'
+export * from './route.config'
+export * from './theme.config'
Index: shared/config/route.config.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/config/route.config.ts b/shared/config/route.config.ts
new file mode 100644
--- /dev/null	(revision 523a46efa351c8d7da6849e97aaef906988802dd)
+++ b/shared/config/route.config.ts	(revision 523a46efa351c8d7da6849e97aaef906988802dd)
@@ -0,0 +1,15 @@
+export const routeConfig = {
+  HOME: '/',
+  ACCOUNT: {
+    INDEX: '/account',
+    AUTH: {
+      SIGN_IN: '/auth/sign-in',
+      SIGN_UP: '/auth/sign-up',
+    },
+    ADDRESS: {
+      INDEX: '/account/address',
+      ADDRESS_NEW: '/account/address/new',
+      ADDRESS_EDIT: '/account/address/edit',
+    },
+  },
+}
Index: src/config/theme.config.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/config/theme.config.ts b/shared/config/theme.config.ts
rename from src/config/theme.config.ts
rename to shared/config/theme.config.ts
--- a/src/config/theme.config.ts	(revision b0d2bda6e4bedff2aa59cf948175aac9c39d29fb)
+++ b/shared/config/theme.config.ts	(revision 523a46efa351c8d7da6849e97aaef906988802dd)
@@ -26,6 +26,8 @@
   headerBackgroundColor: 'bg-gradient-to-tr from-slate-950 to-zinc-950',
   headerShadow: 'shadow-xl',
 
+  formLabel: 'mb-1 select-none text-sm tracking-wide leading-5',
+
   footerDivider: 'bg-slate-800',
   footerDividerBorder: 'border-slate-800',
 
@@ -56,35 +58,35 @@
 
   primaryBorderColor: 'border border-blue-600',
   primaryBorderBottomColor: 'border-b border-b-blue-800',
-  primaryBorderActive: `active:border-blue-500 hover:border-blue-300`,
+  primaryBorderActive: `focus:border-blue-500 active:border-blue-500 hover:border-blue-300`,
 
   successBackgroundColor: 'bg-green-500 border border-green-400',
   successBackgroundHover: `hover:bg-green-600 hover:border-green-500`,
   successBackgroundActive: `active:bg-green-700`,
 
   successBorderColor: 'border border-green-500',
-  successBorderActive: `active:border-green-700 hover:border-green-300`,
+  successBorderActive: `focus:border-green-700 active:border-green-700 hover:border-green-300`,
 
   infoBackgroundColor: 'bg-sky-500 border border-sky-400',
   infoBackgroundHover: `hover:bg-sky-600 hover:border-sky-500`,
   infoBackgroundActive: `active:bg-sky-700`,
 
   infoBorderColor: 'border border-sky-500',
-  infoBorderActive: `active:border-sky-700 hover:border-sky-300`,
+  infoBorderActive: `focus:border-sky-700 active:border-sky-700 hover:border-sky-300`,
 
   warningBackgroundColor: 'bg-orange-500 border border-orange-400',
   warningBackgroundHover: `hover:bg-orange-600 hover:border-orange-500`,
   warningBackgroundActive: `active:bg-orange-700`,
 
   warningBorderColor: 'border border-orange-500',
-  warningBorderActive: `active:border-orange-700 hover:border-orange-300`,
+  warningBorderActive: `focus:border-orange-700 active:border-orange-700 hover:border-orange-300`,
 
   dangerBackgroundColor: 'bg-rose-600 border border-rose-500',
   dangerBackgroundHover: `hover:bg-rose-700 hover:border-rose-600`,
   dangerBackgroundActive: `active:bg-rose-800`,
 
   dangerBorderColor: 'border border-rose-500',
-  dangerBorderActive: `active:border-rose-700 hover:border-rose-300`,
+  dangerBorderActive: `focus:border-rose-700 active:border-rose-700 hover:border-rose-300`,
 
   primaryTextColor: 'text-blue-400 active:text-blue-50',
   successTextColor: 'text-green-400 active:text-green-50',
Index: src/features/account/components/account-dropdown.component.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/features/account/components/account-dropdown.component.tsx b/src/features/account/components/account-dropdown.component.tsx
--- a/src/features/account/components/account-dropdown.component.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/src/features/account/components/account-dropdown.component.tsx	(revision d07ed01f3febb2390dc08d5005c315a4bdae67df)
@@ -1,16 +1,16 @@
 import { FC, useState } from 'react'
 import { useSpring, animated } from '@react-spring/web'
-import { AccountIcon } from '@src/features/account/components/account-icon.component'
+import { AccountIcon } from '@feature/account/components/account-icon.component'
 import { useCookies } from 'react-cookie'
-import { pushUri } from '@util/router.util'
+import { pushUri } from '@shared/util'
 import tw from 'tailwind-styled-components'
-import { themeConfig } from '@src/config/theme.config'
 import {
   UserIcon,
   ListBulletIcon,
   ArrowLeftOnRectangleIcon,
 } from '@heroicons/react/20/solid'
-import { routeConfig } from '@src/config/route.config'
+import { routeConfig, themeConfig } from '@shared/config'
+import { tokenExpiresKey, tokenKey } from '@shared/constant'
 
 export const AccountDropdownComponent = () => {
   const [isVisible, setVisibility] = useState(false)
@@ -65,17 +65,25 @@
 const DropdownContent: FC<DropdownContentProps> = ({
   toggleDropdown,
 }: DropdownContentProps) => {
-  const [, , removeCookie] = useCookies(['jwt'])
+  const [, , removeCookie] = useCookies(['token', 'tokenExpires'])
 
-  const signOut = async () => {
-    removeCookie('jwt', { path: '/' })
-    if (localStorage) localStorage.removeItem('jwt')
-    await pushUri('/', '/home')
-    toggleDropdown()
+  const signOut = () => {
+    removeCookie(tokenKey)
+    removeCookie(tokenExpiresKey)
+    //setCookie('tokenExpires', new Date('1970-01-01T00:00:00.100Z'))
+    pushUri(routeConfig.HOME).then(toggleDropdown)
   }
 
   const accountMenuList = [
     {
+      label: 'Login',
+      icon: () => <UserIcon className="w-4 h-4" />,
+      onClick: async () => {
+        await pushUri(routeConfig.ACCOUNT.AUTH.SIGN_IN)
+        toggleDropdown()
+      },
+    },
+    {
       label: 'Account',
       icon: () => <UserIcon className="w-4 h-4" />,
       onClick: async () => {
Index: src/features/auth/components/header-auth-condition.component.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/features/auth/components/header-auth-condition.component.tsx b/src/features/auth/components/header-auth-condition.component.tsx
--- a/src/features/auth/components/header-auth-condition.component.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/src/features/auth/components/header-auth-condition.component.tsx	(revision d07ed01f3febb2390dc08d5005c315a4bdae67df)
@@ -1,19 +1,31 @@
 import Link from 'next/link'
-import { Button } from '@components/Button'
+import { Button } from '@component'
 import { useCookies } from 'react-cookie'
-import { AccountDropdownComponent } from '@src/features/account/components/account-dropdown.component'
-import { routeConfig } from '@src/config/route.config'
+import { AccountDropdownComponent } from '@feature/account/components/account-dropdown.component'
+import { routeConfig } from '@shared/config'
+import { useEffect } from 'react'
+import { tokenExpiresKey, tokenKey } from '@shared/constant'
 
 export const HeaderAuthConditionComponent = () => {
-  const [cookies] = useCookies(['jwt'])
+  const [cookies, ,] = useCookies([tokenKey, tokenExpiresKey])
 
-  return cookies['jwt'] ? (
+  useEffect(() => {
+    console.log(cookies)
+  }, [cookies])
+
+  return !cookies[tokenKey] ||
+    new Date() > new Date(cookies[tokenExpiresKey] as string) ? (
+    <>
+      <Link href={routeConfig.ACCOUNT.AUTH.SIGN_IN}>
+        <Button>Sign in</Button>
+      </Link>
+      <Link href={routeConfig.ACCOUNT.ADDRESS.INDEX}>
+        <Button style="secondary">Account ADDRESS</Button>
+      </Link>
+    </>
+  ) : (
     <div className="relative">
       <AccountDropdownComponent />
     </div>
-  ) : (
-    <Link href={routeConfig.ACCOUNT.AUTH.SIGN_IN}>
-      <Button>Sign in</Button>
-    </Link>
   )
 }
Index: src/features/auth/components/sign-in.form.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/features/auth/components/sign-in.form.tsx b/src/features/auth/components/sign-in.form.tsx
--- a/src/features/auth/components/sign-in.form.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/src/features/auth/components/sign-in.form.tsx	(revision 738d93f45442a8b0c0282fa64861b2fe62cddbf3)
@@ -1,26 +1,24 @@
-import { Input } from '@components/Form/Input'
 import { AtSymbolIcon, LockClosedIcon } from '@heroicons/react/24/solid'
 import * as Yup from 'yup'
-import {
-  VALIDATION_EMAIL,
-  VALIDATION_PASSWORD,
-} from '@src/features/auth/constant'
+import { VALIDATION_EMAIL, VALIDATION_PASSWORD } from '@feature/auth/constant'
 import { yupResolver } from '@hookform/resolvers/yup'
 import { SubmitHandler, useForm } from 'react-hook-form'
-import { ApolloError, useMutation } from '@apollo/client'
+import { ApolloError } from '@apollo/client'
 import { useCookies } from 'react-cookie'
-import SignInMutation from '@src/features/auth/graphql/sign-in.graphql'
-import { pushUri } from '@util/router.util'
+import { pushUri } from '@shared/util'
 import { useRouter } from 'next/router'
 import {
   Button,
   Form,
   FormSub,
   FormTitle,
+  Input,
   Notification,
   TextLink,
-} from '@src/components'
-import { routeConfig } from '@src/config/route.config'
+} from '@component'
+import { routeConfig } from '@shared/config'
+import { useAuthHook } from '@shared/hook/auth.hook'
+import { tokenKey } from '@shared/constant'
 
 type LoginFormInputs = {
   apiErrors?: any
@@ -29,17 +27,11 @@
 }
 
 export const SignInForm = () => {
-  const [, setCookie] = useCookies(['jwt'])
+  const [, setCookie] = useCookies([tokenKey])
   const {
     query: { message },
   } = useRouter()
-
-  const [signIn] = useMutation(SignInMutation, {
-    onCompleted: data => {
-      if (localStorage) localStorage.setItem('jwt', data?.signIn?.accessToken)
-      setCookie('jwt', data?.signIn?.accessToken, { path: '/' })
-    },
-  })
+  const { signIn } = useAuthHook()
 
   const validationSchema = Yup.object().shape({
     ...VALIDATION_EMAIL,
@@ -64,17 +56,17 @@
   const onSubmit: SubmitHandler<LoginFormInputs> = data => {
     const { email, password } = data
 
-    signIn({
-      variables: {
-        data: {
-          email,
-          password,
-        },
-      },
-    })
-      .then(async () => {
+    signIn({ email, password })
+      .then(async data => {
+        const {
+          accessToken,
+          user: { authExpiresAt },
+        } = data.data?.signIn
+        setCookie(tokenKey, accessToken, {
+          expires: new Date(authExpiresAt),
+        })
         reset()
-        await pushUri('/', '/home')
+        await pushUri(routeConfig.ACCOUNT.ADDRESS.INDEX)
       })
       .catch((error: ApolloError) =>
         setError('apiErrors', { message: error.message })
Index: src/features/auth/components/sign-up.form.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/features/auth/components/sign-up.form.tsx b/src/features/auth/components/sign-up.form.tsx
--- a/src/features/auth/components/sign-up.form.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/src/features/auth/components/sign-up.form.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,4 +1,3 @@
-import { Input } from '@components/Form/Input'
 import {
   AtSymbolIcon,
   LockClosedIcon,
@@ -11,16 +10,15 @@
   VALIDATION_LAST_NAME,
   VALIDATION_PASSWORD,
   VALIDATION_PASSWORD_REPEAT,
-} from '@src/features/auth/constant'
+} from '@feature/auth/constant'
 import { yupResolver } from '@hookform/resolvers/yup'
 import { SubmitHandler, useForm } from 'react-hook-form'
 import { ApolloError, useMutation } from '@apollo/client'
-import SignUpMutation from '@src/features/auth/graphql/sign-up.graphql'
-import { pushUri } from '@util/router.util'
+import SignUpMutation from '@feature/auth/graphql/sign-up.graphql'
+import { pushUri } from '@shared/util'
 import * as Yup from 'yup'
-import { Button, Form, FormSub, FormTitle } from '@src/components'
-import { TextLink } from '@components/TextLink'
-import { routeConfig } from '@src/config/route.config'
+import { Button, Form, FormSub, FormTitle, Input, TextLink } from '@component'
+import { routeConfig } from '@shared/config'
 
 type RegisterFormInputs = {
   apiErrors?: any
Index: src/features/auth/views/sign-in.view.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/features/auth/views/sign-in.view.tsx b/src/features/auth/views/sign-in.view.tsx
--- a/src/features/auth/views/sign-in.view.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/src/features/auth/views/sign-in.view.tsx	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
@@ -1,36 +1,24 @@
-import { SignInForm } from '@src/features/auth/components/sign-in.form'
-import { useCookies } from 'react-cookie'
-import { useEffect } from 'react'
+import { SignInForm } from '@feature/auth/components/sign-in.form'
 import Image from 'next/image'
-import { Container } from '@components/Layout/Container'
-import { pushUri } from '@util/router.util'
-import { Box } from '@components/Layout/Box'
-import { themeConfig } from '@src/config/theme.config'
-
-export const SignInView = () => {
-  const [cookies] = useCookies(['jwt'])
+import { Box, Container } from '@component'
+import { themeConfig } from '@shared/config'
 
-  useEffect(() => {
-    if (cookies['jwt']) pushUri('/', '/home')
-  }, [cookies])
-
-  return (
-    <Container
-      className="min-h-[55rem] bg-[url(/images/account-bg.jpg)] bg-cover"
-      fluid
-    >
-      <Box className="flex justify-evenly -space-x-6">
-        <div className="scale-95 -mt-4 h-full bg-cover bg-center">
-          <Image
-            src="/images/1.jpg"
-            width="500"
-            height="1000"
-            alt="login image"
-            className={themeConfig.radiusDefault}
-          />
-        </div>
-        <SignInForm />
-      </Box>
-    </Container>
-  )
-}
+export const SignInView = () => (
+  <Container
+    className="min-h-[55rem] bg-[url(/images/account-bg.jpg)] bg-cover"
+    fluid
+  >
+    <Box className="flex justify-evenly -space-x-6">
+      <div className="scale-95 -mt-4 h-full bg-cover bg-center">
+        <Image
+          src="/images/1.jpg"
+          width="500"
+          height="1000"
+          alt="login image"
+          className={themeConfig.radiusDefault}
+        />
+      </div>
+      <SignInForm />
+    </Box>
+  </Container>
+)
Index: src/features/auth/views/sign-up.view.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/features/auth/views/sign-up.view.tsx b/src/features/auth/views/sign-up.view.tsx
--- a/src/features/auth/views/sign-up.view.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/src/features/auth/views/sign-up.view.tsx	(revision d07ed01f3febb2390dc08d5005c315a4bdae67df)
@@ -1,36 +1,24 @@
-import { useCookies } from 'react-cookie'
-import { useEffect } from 'react'
 import Image from 'next/image'
-import { Container } from '@components/Layout/Container'
-import { SignUpForm } from '@src/features/auth/components/sign-up.form'
-import { pushUri } from '@util/router.util'
-import { Box } from '@components/Layout/Box'
-import { themeConfig } from '@src/config/theme.config'
-
-export const SignUpView = () => {
-  const [cookies] = useCookies(['jwt'])
+import { Box, Container } from '@component'
+import { SignUpForm } from '@feature/auth/components/sign-up.form'
+import { themeConfig } from '@shared/config'
 
-  useEffect(() => {
-    if (cookies['jwt']) pushUri('/', '/home')
-  }, [cookies])
-
-  return (
-    <Container
-      className="min-h-[55rem] bg-[url(/images/account-bg-2.jpg)] bg-cover"
-      fluid
-    >
-      <Box className="flex justify-evenly -space-x-6">
-        <div className="scale-95 -mt-4 h-full bg-cover bg-center">
-          <Image
-            src="/images/1.jpg"
-            width="500"
-            height="1000"
-            alt="login image"
-            className={themeConfig.radiusDefault}
-          />
-        </div>
-        <SignUpForm />
-      </Box>
-    </Container>
-  )
-}
+export const SignUpView = () => (
+  <Container
+    className="min-h-[55rem] bg-[url(/images/account-bg-2.jpg)] bg-cover"
+    fluid
+  >
+    <Box className="flex justify-evenly -space-x-6">
+      <div className="scale-95 -mt-4 h-full bg-cover bg-center">
+        <Image
+          src="/images/1.jpg"
+          width="500"
+          height="1000"
+          alt="login image"
+          className={themeConfig.radiusDefault}
+        />
+      </div>
+      <SignUpForm />
+    </Box>
+  </Container>
+)
Index: tsconfig.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tsconfig.json b/tsconfig.json
--- a/tsconfig.json	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/tsconfig.json	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -28,20 +28,17 @@
       "@/*": [
         "./*"
       ],
+      "@shared/*": [
+        "./shared/*"
+      ],
+      "@component": [
+        "./shared/component/"
+      ],
       "@src/*": [
         "./src/*"
       ],
-      "@components/*": [
-        "./src/components/*"
-      ],
-      "@lib/*": [
-        "./src/lib/*"
-      ],
-      "@service/*": [
-        "./src/service/*"
-      ],
-      "@util/*": [
-        "./src/util/*"
+      "@feature/*": [
+        "./src/features/*"
       ]
     }
   },
@@ -50,7 +47,7 @@
     "**/*.ts",
     "**/*.tsx",
     ".next/types/**/*.ts",
-    "src/@types/**/*.ts"
+    "shared/@types/**/*.ts"
   ],
   "exclude": [
     "node_modules"
Index: src/features/account/views/account-view.tsx
===================================================================
diff --git a/src/features/account/views/account-view.tsx b/src/features/account/views/account-view.tsx
deleted file mode 100644
--- a/src/features/account/views/account-view.tsx	(revision 523a46efa351c8d7da6849e97aaef906988802dd)
+++ /dev/null	(revision 523a46efa351c8d7da6849e97aaef906988802dd)
@@ -1,84 +0,0 @@
-import { Box } from '@components/Layout/Box'
-import { Container } from '@components/Layout/Container'
-import { Badge, H2, NavLink } from '@src/components'
-import {
-  UserCircleIcon as UserIcon,
-  LockClosedIcon,
-  ListBulletIcon,
-  HomeIcon,
-} from '@heroicons/react/20/solid'
-import { routeConfig } from '@src/config/route.config'
-import { useCallback } from 'react'
-import { useRouter } from 'next/router'
-import { AccountAddress } from '@src/features/account/components/Address/view-address.component'
-import cn from 'classnames'
-import { themeConfig } from '@src/config/theme.config'
-
-export const AccountView = () => {
-  const { pathname } = useRouter()
-  const isMainPage =
-    pathname === routeConfig.ACCOUNT.INDEX || routeConfig.ACCOUNT.ADDRESS.INDEX
-
-  const renderSection = useCallback(() => {
-    switch (pathname) {
-      case routeConfig.ACCOUNT.ADDRESS.INDEX:
-        return <AccountAddress />
-      default:
-        return <H2>MVP</H2>
-    }
-  }, [pathname])
-
-  return (
-    <Container className="flex-row min-h-[62rem]">
-      {isMainPage && (
-        <Box className="flex flex-col space-y-5 w-60 self-start">
-          <NavLink
-            href="/account/details"
-            label={
-              <div className="flex">
-                <span>Account details</span>
-                <Badge rounded={false} className="ml-2 h-6 w-7">
-                  WIP
-                </Badge>
-              </div>
-            }
-            icon={<UserIcon className="h-5 w-5" />}
-          />
-          <NavLink
-            href="/account/orders"
-            label={
-              <div className="flex">
-                <span>View my orders</span>
-                <Badge rounded={false} className="ml-2 h-6 w-7">
-                  WIP
-                </Badge>
-              </div>
-            }
-            icon={<ListBulletIcon className="h-5 w-5" />}
-          />
-          <NavLink
-            href="/account/address"
-            label="Manage addresses"
-            icon={<HomeIcon className="h-5 w-5" />}
-          />
-          <NavLink
-            href="/account/security"
-            label={
-              <div className="flex">
-                <span>Password and Security</span>
-                <Badge rounded={false} className="ml-2 h-6 w-7">
-                  WIP
-                </Badge>
-              </div>
-            }
-            icon={<LockClosedIcon className="h-5 w-5" />}
-          />
-        </Box>
-      )}
-      {!isMainPage && <div className="w-60 self-start"></div>}
-      <section className={cn('w-4/5 pl-4', themeConfig.boxMargin)}>
-        {renderSection()}
-      </section>
-    </Container>
-  )
-}
Index: shared/lib/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/lib/index.ts b/shared/lib/index.ts
new file mode 100644
--- /dev/null	(revision 34031dfb9c99c3bc5b2e01790de58e5056905bf0)
+++ b/shared/lib/index.ts	(revision 34031dfb9c99c3bc5b2e01790de58e5056905bf0)
@@ -0,0 +1,1 @@
+export * from './registry'
Index: shared/lib/intl/en.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/lib/intl/en.json b/shared/lib/intl/en.json
new file mode 100644
--- /dev/null	(revision 34031dfb9c99c3bc5b2e01790de58e5056905bf0)
+++ b/shared/lib/intl/en.json	(revision 34031dfb9c99c3bc5b2e01790de58e5056905bf0)
@@ -0,0 +1,189 @@
+{
+  "header_home": "Home",
+  "header_shop": "Shop",
+  "header_brands": "Brands",
+
+  "intl_en": "English",
+
+  "AT": "Austria",
+  "DE": "Germany",
+  "FR": "France",
+  "IT": "Italy",
+  "NL": "Netherlands",
+  "PL": "Poland",
+  "ES": "Spain",
+  "CH": "Switzerland",
+  "UK": "United Kingdoms",
+
+  "app_slogan": "Unleash your potential with top-notch tech",
+  "app_domain": "digiplus.live",
+
+  "account_welcome": "Hello {name}",
+  "account_my_account": "My Account",
+  "account_details_edit": "Edit user",
+
+  "order_my_orders": "My Orders",
+  "order_no_orders": "No orders present",
+
+  "auth_sign_in": "Sign in",
+  "auth_sign_up": "Sign ip",
+  "auth_sign_in_button": "Login",
+  "auth_sign_up_button": "Register",
+  "auth_sign_out_button": "Sign out",
+
+  "account_email": "E-Mail",
+  "account_first_name": "First name",
+  "account_last_name": "Last name",
+  "account_username": "Username",
+  "account_salutation": "Salutation",
+  "account_phone": "Phone",
+  "auth_form_password": "Password",
+  "auth_form_password_repeat": "Repeat password",
+  "auth_form_login_button": "Login",
+  "auth_form_register_button": "Register",
+  "auth_form_forgot_password": "Forgot password?",
+  "auth_form_already_have_account": "Already have an account? Sign in.",
+  "auth_form_no_account_yet": "No account yet? Create account now.",
+
+  "auth_password_reset": "Reset your password",
+  "auth_password_reset_button": "Reset password",
+  "auth_password_request_link_button": "Receive reset link",
+  "auth_password_request_link_sent": "A password reset url has been sent to {email}. Please check your inbox or spam folder.",
+  "auth_password_new": "Please choose a new password",
+  "auth_password_changed": "Password changed successfully. Please login with your new credentials.",
+  "auth_token_invalid": "Token invalid. Please request a new password.",
+
+  "auth_validation_email_invalid": "E-Mail must be valid",
+  "auth_validation_email_required": "An E-mail is required",
+  "auth_validation_password_required": "A password is required",
+  "auth_validation_password_min_length": "Password requires a minimum of 6 characters",
+  "auth_validation_password_max_length": "Password can't contain more than 96 characters",
+  "auth_validation_password_must_match": "Passwords must match",
+
+  "address_addresses": "Addresses",
+
+  "product_addToCart": "Add to Cart",
+  "product_displaySize": "Display size in inch",
+  "product_cpu": "Processor",
+  "product_ram": "RAM",
+  "product_storage": "Storage",
+  "product_description": "Description",
+  "product_specs": "Specifications",
+  "product_ratings": "Ratings",
+  "product_rateNow": "Rate now",
+  "product_rateCTA": "What do you think of this product?",
+  "product_rateButton": "Rate product",
+  "product_warranty": "24 months warranty",
+  "product_loginToRate": "Please login to rate a product",
+  "product_noRatings": "This product has no reviews yet",
+  "product_available": "Available",
+  "product_outOfStock": "Out of stock",
+  "product_soonOutOfStock": "Almost sold out",
+
+  "cart_title": "Cart",
+  "cart_title_products": "products",
+  "cart_empty": "Your cart is currently empty.",
+  "cart_empty_continueBrowsing": "Continue browsing <b>here</b>",
+  "cart_price_subTotal": "Sub Total",
+  "cart_price_shippingEst": "Shipping est.",
+  "cart_price_tax": "VAT (7.7%)",
+  "cart_price_net_total": "Net amount",
+  "cart_price_total": "Total amount",
+  "cart_to_cart": "Go to cart",
+  "cart_to_checkout": "Go to checkout",
+  "cart_free_of_charge": "Free of charge",
+  "cart_save_for_later": "Save for later",
+  "cart_remove": "Delete",
+
+  "checkout_title": "Your Order:",
+  "checkout_title_shipping": "Delivery",
+  "checkout_shipping": "Shipping",
+  "checkout_shipping_address": "Delivery address",
+  "checkout_shipping_option": "Delivery options",
+  "checkout_shipping_new": "Create a new address",
+  "checkout_shipping_permit_saturday": "Allow Saturday delivery",
+  "checkout_shipping_saturday_permitted": "Saturday delivery allowed",
+  "checkout_title_payment": "Payment",
+  "checkout_payment_select": "Select your payment method:",
+  "checkout_payment_invoice_address": "Invoice address",
+  "checkout_payment_invoice_same": "Same as the delivery address",
+  "checkout_payment_invoice_another": "Choose another invoice address",
+  "checkout_payment_mastercard": "MasterCard",
+  "checkout_payment_option_mastercard": "Pay for your purchase with your MasterCard. Extra charges: none",
+  "checkout_title_order_summary": "Order overview",
+  "checkout_order_summary_description": "Description",
+  "checkout_order_summary_amount": "Quantity",
+  "checkout_order_summary_price": "Price",
+  "checkout_order_summary_total": "Total",
+  "checkout_edit": "Edit",
+  "checkout_save": "Continue",
+  "checkout_cta": "Pay now",
+
+  "checkout_shipping_info": "Have your products sent to your home or workplace.",
+  "checkout_title_shipping_new": "New address",
+  "checkout_form_create_delivery_private": "Private address",
+  "checkout_form_create_delivery_business_address": "Company address",
+  "checkout_form_create_delivery_business": "Company",
+  "checkout_form_create_delivery_firstname": "First name",
+  "checkout_form_create_delivery_lastname": "Last name",
+  "checkout_form_create_line1": "Street and number",
+  "checkout_form_create_delivery_zip": "Zip Code",
+  "checkout_form_create_delivery_state": "State",
+  "checkout_form_create_delivery_country": "Country",
+  "checkout_form_create_delivery_save": "Save address",
+  "checkout_form_create_delivery_cancel": "Cancel",
+
+  "form_field_required": "This field is required.",
+
+  "wishlist_title": "Wishlist",
+  "wishlist_title_products": "products",
+  "wishlist_empty": "Your wishlist is currently empty.",
+  "wishlist_empty_continueBrowsing": "Continue browsing <b>here</b>",
+
+  "navigation_searchbar_text": "Search...",
+  "navigation_home": "Home",
+  "navigation_products": "Products",
+  "navigation_products_smartphone_tablet": "Smartphones + Tablets",
+  "navigation_products_notebook_pc": "Notebooks + PC",
+  "navigation_brands": "Brands",
+  "navigation_categories": "Categories",
+  "navigation_my_cart": "My Cart",
+  "navigation_shop": "Shopping",
+
+  "footer_home": "Home",
+  "footer_about": "About us",
+  "footer_career": "Careers",
+  "footer_support": "Help",
+  "footer_contact": "Contact us",
+  "footer_copyright": "All Rights Reserved",
+  "footer_termsAndConditions": "Terms & Conditions",
+  "footer_blogs": "Blogs",
+  "footer_customerService": "Customer Services",
+
+  "data_recordsPerPage": "{offset} items",
+  "data_showingOf": "Showing {pageRecordCount} of {count} products",
+  "data_showingOfSearch": "Showing {pageRecordCount} products of {count} for \"{q}\"",
+
+  "filter_price": "Price",
+  "filter_priceApply": "Apply",
+  "filter_priceReset": "Reset",
+  "filter_specs": "Specifications",
+  "filter_specs_ram": "RAM",
+  "filter_specs_storage": "Storage",
+  "filter_tagsRam": "RAM: {amount}GB",
+  "filter_tagsStorage": "Storage: {amount}GB",
+  "filter_tagsMinPrice": "Min. Price: {amount}.-",
+  "filter_tagsMaxPrice": "Max. Price: {amount}.-",
+  "filter_gb": "GB",
+
+  "Category_laptop": "Notebooks",
+  "Category_smartphone": "Smartphones",
+
+  "payment_methods_saved": "Saved payment methods",
+
+  "password_and_security": "Password and Security",
+
+  "ASC_price": "Lowest price",
+  "DESC_price": "Highest price",
+  "DESC_rating": "Rating"
+}
Index: src/lib/registry.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lib/registry.tsx b/shared/lib/registry.tsx
rename from src/lib/registry.tsx
rename to shared/lib/registry.tsx
--- a/src/lib/registry.tsx	(revision ba44c90943ecd6f8e47b0726a1a16434674bae58)
+++ b/shared/lib/registry.tsx	(revision 34031dfb9c99c3bc5b2e01790de58e5056905bf0)
@@ -4,7 +4,7 @@
 import { useServerInsertedHTML } from 'next/navigation'
 import { ServerStyleSheet, StyleSheetManager } from 'styled-components'
 
-export default function StyledComponentsRegistry({
+export function StyledComponentsRegistry({
   children,
 }: {
   children: React.ReactNode
Index: pages/account/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/account/index.tsx b/pages/account/index.tsx
--- a/pages/account/index.tsx	(revision 34031dfb9c99c3bc5b2e01790de58e5056905bf0)
+++ b/pages/account/index.tsx	(revision 738d93f45442a8b0c0282fa64861b2fe62cddbf3)
@@ -1,4 +1,4 @@
-import { AccountView } from '@src/features/account/views/account-view'
+import { AccountView } from '@feature/account/views/account.view'
 
 const Account = () => <AccountView />
 export default Account
Index: pages/auth/sign-in.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/auth/sign-in.tsx b/pages/auth/sign-in.tsx
--- a/pages/auth/sign-in.tsx	(revision 34031dfb9c99c3bc5b2e01790de58e5056905bf0)
+++ b/pages/auth/sign-in.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,4 +1,4 @@
-import { SignInView } from '@src/features/auth/views/sign-in.view'
+import { SignInView } from '@feature/auth/views/sign-in.view'
 
 const SignIn = () => <SignInView />
 export default SignIn
Index: pages/auth/sign-up.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/auth/sign-up.tsx b/pages/auth/sign-up.tsx
--- a/pages/auth/sign-up.tsx	(revision 34031dfb9c99c3bc5b2e01790de58e5056905bf0)
+++ b/pages/auth/sign-up.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,4 +1,4 @@
-import { SignUpView } from '@src/features/auth/views/sign-up.view'
+import { SignUpView } from '@feature/auth/views/sign-up.view'
 
 const SignUp = () => <SignUpView />
 export default SignUp
Index: pages/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/index.tsx b/pages/index.tsx
--- a/pages/index.tsx	(revision 34031dfb9c99c3bc5b2e01790de58e5056905bf0)
+++ b/pages/index.tsx	(revision 738d93f45442a8b0c0282fa64861b2fe62cddbf3)
@@ -1,11 +1,12 @@
-import { Button } from '@src/components'
-import { Container } from '@components/Layout/Container'
+import { Button, Container } from '@component'
 
-const Home = () => (
-  <Container className="py-20">
-    <span>Home</span>
-    <Button>Home</Button>
-  </Container>
-)
+const Home = () => {
+  return (
+    <Container className="py-20">
+      <span>Home</span>
+      <Button>Home</Button>
+    </Container>
+  )
+}
 
 export default Home
Index: src/components/Badge.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Badge.tsx b/shared/component/Badge.tsx
rename from src/components/Badge.tsx
rename to shared/component/Badge.tsx
--- a/src/components/Badge.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/Badge.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,5 +1,5 @@
 import tw from 'tailwind-styled-components'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
 
 const Badge = tw.div<{ rounded?: boolean }>`
   font-semibold
Index: src/components/Branding/Logo.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Branding/Logo.tsx b/shared/component/Branding/Logo.tsx
rename from src/components/Branding/Logo.tsx
rename to shared/component/Branding/Logo.tsx
--- a/src/components/Branding/Logo.tsx	(revision 34031dfb9c99c3bc5b2e01790de58e5056905bf0)
+++ b/shared/component/Branding/Logo.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,7 +1,7 @@
 import React from 'react'
 
 import Image from 'next/image'
-import { BRAND_NAME } from '@components/Branding/constant'
+import { BRAND_NAME } from '@shared/component/Branding/constant'
 
 export const Logo = () => {
   return (
Index: src/components/Branding/Slogan.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Branding/Slogan.tsx b/shared/component/Branding/Slogan.tsx
rename from src/components/Branding/Slogan.tsx
rename to shared/component/Branding/Slogan.tsx
--- a/src/components/Branding/Slogan.tsx	(revision 34031dfb9c99c3bc5b2e01790de58e5056905bf0)
+++ b/shared/component/Branding/Slogan.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,5 +1,5 @@
 import React from 'react'
-import { BRAND_SLOGAN } from '@components/Branding/constant'
+import { BRAND_SLOGAN } from '@shared/component/Branding/constant'
 
 export const Slogan = () => {
   return (
Index: src/components/Button.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Button.tsx b/shared/component/Button.tsx
rename from src/components/Button.tsx
rename to shared/component/Button.tsx
--- a/src/components/Button.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/Button.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,5 +1,5 @@
 import tw from 'tailwind-styled-components'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
 import { PropsWithChildren, useCallback } from 'react'
 
 interface ButtonProps {
Index: src/components/Footer.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Footer.tsx b/shared/component/Footer.tsx
rename from src/components/Footer.tsx
rename to shared/component/Footer.tsx
--- a/src/components/Footer.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/Footer.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,11 +1,7 @@
 import Link from 'next/link'
-import { Logo } from '@components/Branding/Logo'
-import { Slogan } from '@components/Branding/Slogan'
-import { InstagramIcon } from '@components/Branding/Social/InstagramIcon'
-import { WhatsappIcon } from '@components/Branding/Social/WhatsappIcon'
-import { MetaIcon } from '@components/Branding/Social/MetaIcon'
 import cn from 'classnames'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
+import { InstagramIcon, Logo, MetaIcon, Slogan, WhatsappIcon } from '@component'
 
 export const Footer = () => {
   const date = new Date()
Index: shared/component/Form/FieldError.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/component/Form/FieldError.tsx b/shared/component/Form/FieldError.tsx
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/component/Form/FieldError.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,8 @@
+import tw from 'tailwind-styled-components'
+import { themeConfig } from '@shared/config'
+
+export const FieldError = tw.p`
+  ${() => themeConfig.dangerTextColor}
+  text-sm
+  mt-2
+`
Index: src/components/Form/Input.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Form/Input.tsx b/shared/component/Form/Input.tsx
rename from src/components/Form/Input.tsx
rename to shared/component/Form/Input.tsx
--- a/src/components/Form/Input.tsx	(revision b0d2bda6e4bedff2aa59cf948175aac9c39d29fb)
+++ b/shared/component/Form/Input.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,13 +1,15 @@
 import tw from 'tailwind-styled-components'
 import { InputHTMLAttributes, ReactNode, useState } from 'react'
-import { FormGroup } from '@components/Form/Group'
+import { FormGroup } from '@component'
 import { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/solid'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
 
 interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
+  className?: string
   errors?: any
   error?: any
-  icon?: string | ReactNode
+  noIcon?: boolean
+  icon?: ReactNode
   label: string
   name: string
   register: any
@@ -18,26 +20,22 @@
 
 const Label = tw.label<{ error: string }>`
   ${() => themeConfig.mainTextColor}
+  ${() => themeConfig.formLabel}
   ${p => p.error && themeConfig.dangerTextColor}
-  mb-1
-  select-none
-  text-sm
-  tracking-wide
-  leading-5
 `
 
-const StyledInput = tw.input<InputProps>`
+export const StyledInput = tw.input<InputProps>`
   ${() => themeConfig.mainTextColor}
   ${() => themeConfig.inputFieldBorder}
   ${() => themeConfig.primaryBorderActive}
   ${() => themeConfig.radiusDefault}
-  ${p => p.error && themeConfig.dangerBorderActive}
   bg-transparent
   w-full
   relative
   py-1.5
   outline-none
-  pl-8
+  ${p => p.error && themeConfig.dangerBorderActive}
+  ${props => (!props.noIcon ? 'pl-8' : 'px-2')}
 `
 
 const StyledInputError = tw.p`
@@ -47,10 +45,12 @@
 `
 
 export const Input = ({
+  className,
   errors,
   icon,
   label,
   name,
+  noIcon = false,
   register,
   required = false,
   secretField = false,
@@ -61,7 +61,7 @@
   const toggleFieldVisibility = () => setFieldVisibility(!fieldVisible)
 
   return (
-    <FormGroup>
+    <FormGroup className={className}>
       <Label htmlFor={name} error={errors[name]}>
         {label}
         {required && (
@@ -69,7 +69,7 @@
         )}
       </Label>
       <div className="relative flex">
-        {icon && (
+        {!noIcon && (
           <span
             className={`absolute top-2 left-2 z-10 ${themeConfig.mainTextColor}`}
           >
@@ -82,6 +82,7 @@
           type={!secretField ? type : fieldVisible ? 'text' : 'password'}
           error={errors[name]}
           {...register(name, validationSchema)}
+          noIcon={noIcon}
         />
         {secretField && !fieldVisible && (
           <EyeSlashIcon
Index: shared/component/Form/Select.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/component/Form/Select.tsx b/shared/component/Form/Select.tsx
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/component/Form/Select.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,92 @@
+import tw from 'tailwind-styled-components'
+import { OptionHTMLAttributes, ReactNode, SelectHTMLAttributes } from 'react'
+import { FormGroup, FieldError } from '@component'
+import { themeConfig } from '@shared/config'
+
+interface OptionsProps extends OptionHTMLAttributes<HTMLOptionElement> {
+  value: string | number
+  name?: string | ReactNode
+}
+
+interface SelectProps extends SelectHTMLAttributes<HTMLSelectElement> {
+  className?: string
+  error?: any
+  errors?: any
+  icon?: ReactNode
+  label: string
+  name: string
+  noIcon?: boolean
+  options: OptionsProps[]
+  register: any
+  required?: boolean
+  secretField?: boolean
+  validationSchema?: never
+}
+
+const Label = tw.label<{ error: string }>`
+  ${() => themeConfig.mainTextColor}
+  ${() => themeConfig.formLabel}
+  ${p => p.error && themeConfig.dangerTextColor}
+`
+
+const StyledSelect = tw.select<SelectProps>`
+  ${() => themeConfig.mainTextColor}
+  ${() => themeConfig.inputFieldBorder}
+  ${() => themeConfig.primaryBorderActive}
+  ${() => themeConfig.radiusDefault}
+  bg-transparent
+  w-full
+  relative
+  py-2.5
+  outline-none
+  ${props => (!props.noIcon ? 'pl-8' : 'px-2')}
+`
+
+export const Select = ({
+  className,
+  errors,
+  icon,
+  label,
+  name,
+  noIcon = false,
+  options = [],
+  register,
+  required = false,
+  validationSchema,
+}: SelectProps) => (
+  <FormGroup className={className}>
+    <Label htmlFor={name} error={errors[name]}>
+      {label}
+      {required && (
+        <span className={`ml-1 ${themeConfig.dangerTextColor}`}>*</span>
+      )}
+    </Label>
+    <div className="relative flex items-center">
+      {!noIcon && (
+        <span className={`absolute left-2 z-10 ${themeConfig.mainTextColor}`}>
+          {icon}
+        </span>
+      )}
+      <StyledSelect
+        id={name}
+        name={name}
+        error={errors[name]}
+        {...register(name, validationSchema)}
+        noIcon={noIcon}
+      >
+        {options?.map((option: OptionsProps) => (
+          <option
+            key={option.value}
+            className="bg-gray-700 font-sans"
+            value={option.value}
+          >
+            {option.name ? option.name : option.value}
+          </option>
+        ))}
+      </StyledSelect>
+    </div>
+    {errors && errors[name]?.message && (
+      <FieldError>{errors[name]?.message}</FieldError>
+    )}
+  </FormGroup>
+)
Index: src/components/Header.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Header.tsx b/shared/component/Header.tsx
rename from src/components/Header.tsx
rename to shared/component/Header.tsx
--- a/src/components/Header.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/Header.tsx	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
@@ -6,16 +6,18 @@
   BuildingStorefrontIcon,
   HomeIcon,
 } from '@heroicons/react/24/outline'
-import { NavLink } from '@components/NavLink'
+import {
+  Badge,
+  Container,
+  NavigationDropdown,
+  NavLink,
+  LanguageChange,
+} from '@component'
 import Link from 'next/link'
 import tw from 'tailwind-styled-components'
-import { Badge } from '@components/Badge'
-import { NavigationDropdown } from '@components/NavigationDropdown'
-import { Container } from '@components/Layout/Container'
-import { HeaderAuthConditionComponent } from '@src/features/auth/components/header-auth-condition.component'
-import { themeConfig } from '@src/config/theme.config'
+import { HeaderAuthConditionComponent } from '@feature/auth/components/header-auth-condition.component'
+import { themeConfig } from '@shared/config'
 import cn from 'classnames'
-import { LanguageChange } from '@components/LanguageChange'
 
 const HeaderTW = tw.div`
   flex
@@ -38,19 +40,18 @@
 
   <HeaderTW>
     <Container className="flex flex-row items-center justify-between">
-      <Link href="/" as="/home">
+      <Link href="/">
         <Image
           src="/images/web_store_hub_logo_info-blue.png"
           alt="e-commerce store logo"
           width="250"
-          height="0"
+          height="50"
         />
       </Link>
       <NavTW>
         <NavLink
           label="Home"
           href="/"
-          as="/home"
           icon={<HomeIcon className="h-4 mr-1" />}
         />
         <NavigationDropdown
Index: shared/component/LanguageChange.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/component/LanguageChange.tsx b/shared/component/LanguageChange.tsx
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/component/LanguageChange.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,34 @@
+import { useCookies } from 'react-cookie'
+import { LanguageIcon } from '@heroicons/react/24/solid'
+import cn from 'classnames'
+import { useRouter } from 'next/router'
+
+interface LanguageChangeProps {
+  className?: string
+}
+
+export const LanguageChange = ({ className }: LanguageChangeProps) => {
+  const { locale, locales, defaultLocale } = useRouter()
+
+  const [cookies, setCookie, removeCookie] = useCookies(['locale'])
+
+  /*  console.log('locale:')
+  console.log(cookies['locale'])
+
+  useEffect(() => {
+    console.log(locale)
+    console.log(locales)
+    console.log(defaultLocale)
+    /!*if (cookies['locale'])
+      console.log(cookies['locale'])*!/
+  })*/
+
+  return (
+    <div
+      className={cn('flex items-center space-x-1 cursor-pointer', className)}
+    >
+      <span>EN</span>
+      <LanguageIcon className="h-4 w-4" />
+    </div>
+  )
+}
Index: src/components/Layout/Box.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Layout/Box.tsx b/shared/component/Layout/Box.tsx
rename from src/components/Layout/Box.tsx
rename to shared/component/Layout/Box.tsx
--- a/src/components/Layout/Box.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/Layout/Box.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,5 +1,5 @@
 import tw from 'tailwind-styled-components'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
 
 export const Box = tw.section`
   w-full
Index: src/components/Layout/Container.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Layout/Container.tsx b/shared/component/Layout/Container.tsx
rename from src/components/Layout/Container.tsx
rename to shared/component/Layout/Container.tsx
--- a/src/components/Layout/Container.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/Layout/Container.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,5 +1,5 @@
 import tw from 'tailwind-styled-components'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
 
 interface ContainerProps {
   fluid?: boolean
Index: src/components/Layout/Layout.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Layout/Layout.tsx b/shared/component/Layout/Layout.tsx
rename from src/components/Layout/Layout.tsx
rename to shared/component/Layout/Layout.tsx
--- a/src/components/Layout/Layout.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/Layout/Layout.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,5 +1,5 @@
 import tw from 'tailwind-styled-components'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
 
 export const Layout = tw.section`
   ${() => themeConfig.mainBackgroundColor}
Index: src/components/NavLink.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/NavLink.tsx b/shared/component/NavLink.tsx
rename from src/components/NavLink.tsx
rename to shared/component/NavLink.tsx
--- a/src/components/NavLink.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/NavLink.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -2,7 +2,7 @@
 import { ReactNode } from 'react'
 import tw from 'tailwind-styled-components'
 import { Url } from 'url'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
 import { useRouter } from 'next/router'
 import cn from 'classnames'
 
Index: src/components/NavigationDropdown.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/NavigationDropdown.tsx b/shared/component/NavigationDropdown.tsx
rename from src/components/NavigationDropdown.tsx
rename to shared/component/NavigationDropdown.tsx
--- a/src/components/NavigationDropdown.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/NavigationDropdown.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -4,7 +4,7 @@
 import Image from 'next/image'
 import Link from 'next/link'
 import { ReactNode } from 'react'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
 
 interface DropdownListProps {
   href: Url | string
Index: src/components/TextLink.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/TextLink.tsx b/shared/component/TextLink.tsx
rename from src/components/TextLink.tsx
rename to shared/component/TextLink.tsx
--- a/src/components/TextLink.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/TextLink.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -2,7 +2,7 @@
 import { ReactNode } from 'react'
 import tw from 'tailwind-styled-components'
 import { Url } from 'url'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
 import cn from 'classnames'
 
 interface TextLinkProps {
Index: src/components/Typography/H1.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Typography/H1.tsx b/shared/component/Typography/H1.tsx
rename from src/components/Typography/H1.tsx
rename to shared/component/Typography/H1.tsx
--- a/src/components/Typography/H1.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/Typography/H1.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,5 +1,5 @@
 import tw from 'tailwind-styled-components'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
 
 export const H1 = tw.h1`
   ${() => themeConfig.textSizeH1}
Index: src/components/Typography/H2.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Typography/H2.tsx b/shared/component/Typography/H2.tsx
rename from src/components/Typography/H2.tsx
rename to shared/component/Typography/H2.tsx
--- a/src/components/Typography/H2.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/shared/component/Typography/H2.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,5 +1,5 @@
 import tw from 'tailwind-styled-components'
-import { themeConfig } from '@src/config/theme.config'
+import { themeConfig } from '@shared/config'
 
 export const H2 = tw.h2`
   ${() => themeConfig.textSizeH2}
Index: shared/component/Typography/H3.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/component/Typography/H3.tsx b/shared/component/Typography/H3.tsx
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/component/Typography/H3.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,9 @@
+import tw from 'tailwind-styled-components'
+import { themeConfig } from '@shared/config'
+
+export const H3 = tw.h3`
+  ${() => themeConfig.textSizeH3}
+  font-light
+  tracking-wide
+  mb-1
+`
Index: shared/component/Typography/H4.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/component/Typography/H4.tsx b/shared/component/Typography/H4.tsx
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/component/Typography/H4.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,9 @@
+import tw from 'tailwind-styled-components'
+import { themeConfig } from '@shared/config'
+
+export const H4 = tw.h4`
+  ${() => themeConfig.textSizeH4}
+  font-light
+  tracking-wide
+  mb-1
+`
Index: shared/component/Typography/H5.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/component/Typography/H5.tsx b/shared/component/Typography/H5.tsx
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/component/Typography/H5.tsx	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,9 @@
+import tw from 'tailwind-styled-components'
+import { themeConfig } from '@shared/config'
+
+export const H5 = tw.h5`
+  ${() => themeConfig.textSizeH5}
+  font-light
+  tracking-wide
+  mb-1
+`
Index: src/components/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/index.ts b/shared/component/index.ts
rename from src/components/index.ts
rename to shared/component/index.ts
--- a/src/components/index.ts	(revision 659584f6d787f511ed4aa4be3861ced79f12ccf7)
+++ b/shared/component/index.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -4,23 +4,30 @@
 export * from './Branding/Social/MetaIcon'
 export * from './Branding/Social/WhatsappIcon'
 
+export * from './Badge'
+export * from './Button'
+export * from './Footer'
+export * from './Header'
+export * from './LanguageChange'
+export * from './NavLink'
+export * from './NavigationDropdown'
+export * from './Notification'
+export * from './TextLink'
+
+export * from './Layout/Box'
+export * from './Layout/Container'
+export * from './Layout/Layout'
+
+export * from './Form/FieldError'
 export * from './Form/Form'
 export * from './Form/FormSub'
 export * from './Form/FormTitle'
 export * from './Form/Group'
 export * from './Form/Input'
+export * from './Form/Select'
 
 export * from './Typography/H1'
 export * from './Typography/H2'
 export * from './Typography/H3'
 export * from './Typography/H4'
 export * from './Typography/H5'
-
-export * from './Badge'
-export * from './Button'
-export * from './Footer'
-export * from './Header'
-export * from './NavLink'
-export * from './NavigationDropdown'
-export * from './Notification'
-export * from './TextLink'
Index: shared/hook/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/hook/index.ts b/shared/hook/index.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/hook/index.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,1 @@
+export * from './has-hydrated.hook'
Index: shared/model/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/index.ts b/shared/model/index.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/index.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,19 @@
+export * from './base.model'
+
+export * from './order/order.model'
+export * from './order/order-has-product.model'
+
+export * from './product/brand.model'
+export * from './product/category.model'
+export * from './product/image.model'
+export * from './product/product.model'
+export * from './product/rating.model'
+export * from './product/specification/battery.model'
+export * from './product/specification/connectivity.model'
+export * from './product/specification/cpu.model'
+export * from './product/specification/display.model'
+export * from './product/specification/specification.model'
+
+export * from './user/address.model'
+export * from './user/credit-card.model'
+export * from './user/user.model'
Index: shared/model/order/order-has-product.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/order/order-has-product.model.ts b/shared/model/order/order-has-product.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/order/order-has-product.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,8 @@
+import { Order, Product } from '@shared/model'
+
+export class OrderHasProduct {
+  id: string
+  quantity: number
+  order: Order
+  product: Product
+}
Index: shared/model/order/order.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/order/order.model.ts b/shared/model/order/order.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/order/order.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,11 @@
+import { Address, BaseEntity, OrderHasProduct, User } from '@shared/model'
+
+export class Order extends BaseEntity {
+  total: number
+  pending: boolean
+  cancelled?: Date | null
+  billingAddress?: Address
+  products: OrderHasProduct[]
+  shippingAddress?: Address
+  user?: User | null
+}
Index: shared/model/product/brand.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/product/brand.model.ts b/shared/model/product/brand.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/product/brand.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,6 @@
+import { BaseEntity, Product } from '@shared/model'
+
+export class ProductBrand extends BaseEntity {
+  name: string
+  product?: Product
+}
Index: shared/model/product/category.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/product/category.model.ts b/shared/model/product/category.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/product/category.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,6 @@
+import { BaseEntity, Product } from '@shared/model'
+
+export class ProductCategory extends BaseEntity {
+  name: string
+  product?: Product
+}
Index: shared/model/product/image.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/product/image.model.ts b/shared/model/product/image.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/product/image.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,6 @@
+import { BaseEntity, Product } from '@shared/model'
+
+export class ProductImage extends BaseEntity {
+  url: string
+  product?: Product
+}
Index: shared/model/product/product.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/product/product.model.ts b/shared/model/product/product.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/product/product.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,28 @@
+import {
+  BaseEntity,
+  OrderHasProduct,
+  ProductBrand,
+  ProductCategory,
+  ProductImage,
+  ProductRating,
+  ProductSpecification,
+} from '@shared/model'
+
+export class Product extends BaseEntity {
+  description?: string
+  discount?: number
+  name: string
+  osUpgradable?: number
+  price: number
+  ratingAverage?: number
+  sku: string
+  stock: number
+  thumbnail?: string
+  warranty?: number
+  brand: ProductBrand
+  category: ProductCategory
+  image?: ProductImage[]
+  order?: OrderHasProduct[]
+  rating?: ProductRating[]
+  specification: ProductSpecification
+}
Index: shared/model/product/rating.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/product/rating.model.ts b/shared/model/product/rating.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/product/rating.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,8 @@
+import { BaseEntity, Product, User } from '@shared/model'
+
+export class ProductRating extends BaseEntity {
+  star: number
+  text: string
+  product: Product
+  user: User
+}
Index: shared/model/product/specification/battery.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/product/specification/battery.model.ts b/shared/model/product/specification/battery.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/product/specification/battery.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,10 @@
+import { BaseEntity, ProductSpecification } from '@shared/model'
+
+export class SpecificationBattery extends BaseEntity {
+  capacity: number
+  chargingSpeed?: number
+  reverseCharging?: number
+  type: string
+  wirelessCharging?: number
+  productSpecification?: ProductSpecification
+}
Index: shared/model/product/specification/connectivity.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/product/specification/connectivity.model.ts b/shared/model/product/specification/connectivity.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/product/specification/connectivity.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,10 @@
+import { BaseEntity, ProductSpecification } from '@shared/model'
+
+export class SpecificationConnectivity extends BaseEntity {
+  mobileStandard?: string
+  connectivity?: string[]
+  wifiStandard?: string
+  bluetoothVersion?: number
+  audio?: string
+  productSpecification?: ProductSpecification
+}
Index: shared/model/product/specification/cpu.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/product/specification/cpu.model.ts b/shared/model/product/specification/cpu.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/product/specification/cpu.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,8 @@
+import { BaseEntity, ProductSpecification } from '@shared/model'
+
+export class SpecificationCPU extends BaseEntity {
+  cores?: number
+  frequency?: number[]
+  name: string
+  productSpecification?: ProductSpecification
+}
Index: shared/model/product/specification/display.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/product/specification/display.model.ts b/shared/model/product/specification/display.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/product/specification/display.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,11 @@
+import { BaseEntity, ProductSpecification } from '@shared/model'
+
+export class SpecificationDisplay extends BaseEntity {
+  aspectRatio?: string
+  pixelDensity?: number
+  refreshRate?: number
+  resolution?: string
+  screenToBody?: number
+  size: number
+  productSpecification?: ProductSpecification
+}
Index: shared/model/product/specification/specification.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/product/specification/specification.model.ts b/shared/model/product/specification/specification.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/product/specification/specification.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,23 @@
+import {
+  BaseEntity,
+  Product,
+  SpecificationBattery,
+  SpecificationConnectivity,
+  SpecificationCPU,
+  SpecificationDisplay,
+} from '@shared/model'
+
+export class ProductSpecification extends BaseEntity {
+  dataRam: number
+  dataStorage: number[]
+  dimensionLength: number
+  dimensionWidth: number
+  dimensionDepth: number
+  dimensionUnit?: string
+  dimensionWeight: number
+  battery: SpecificationBattery
+  connectivity: SpecificationConnectivity
+  cpu: SpecificationCPU
+  display: SpecificationDisplay
+  product?: Product
+}
Index: src/model/address.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/address.model.ts b/shared/model/user/address.model.ts
rename from src/model/address.model.ts
rename to shared/model/user/address.model.ts
--- a/src/model/address.model.ts	(revision ec2c5aaae04a74a83ad7cc1edf8d3486309df617)
+++ b/shared/model/user/address.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -1,5 +1,4 @@
-import { BaseEntity } from '@src/models/base.model'
-import { User } from '@src/model/user.model'
+import { BaseEntity, User } from '@shared/model'
 
 export enum AddressType {
   SHIPPING = 'shipping',
Index: shared/model/user/credit-card.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/model/user/credit-card.model.ts b/shared/model/user/credit-card.model.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/model/user/credit-card.model.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,11 @@
+import { BaseEntity, User } from '@shared/model'
+
+export class CreditCard extends BaseEntity {
+  creditCardNumber: string
+  expirationDate: Date
+  expirationDateFormatted?: string
+  ccv: number
+  cardType: string
+  main?: boolean
+  user?: User
+}
Index: src/model/user.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/user.model.ts b/shared/model/user/user.model.ts
rename from src/model/user.model.ts
rename to shared/model/user/user.model.ts
--- a/src/model/user.model.ts	(revision ec2c5aaae04a74a83ad7cc1edf8d3486309df617)
+++ b/shared/model/user/user.model.ts	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
@@ -1,8 +1,10 @@
-import { BaseEntity } from '@src/models/base.model'
-import { Address } from '@src/model/address.model'
-//import { CreditCard } from '@src/model/credit-card.model'
-//import { Order } from '@src/model/order.model'
-//import { ProductRating } from '@src/model/product/rating.model'
+import {
+  Address,
+  BaseEntity,
+  CreditCard,
+  Order,
+  ProductRating,
+} from '@shared/model'
 
 enum Role {
   ADMIN = 'admin',
@@ -20,12 +22,13 @@
   phone?: string
   activated?: Date
   activationToken?: string | null
+  authExpiresAt?: Date
   passwordToken?: string | null
   passwordTokenCreated?: Date | null
   emailToken?: string | null
   emailTokenCreated?: Date | null
   address?: Address[]
-  //creditCards?: CreditCard[]
-  //order?: Order[]
-  //rating?: ProductRating[]
+  creditCards?: CreditCard[]
+  order?: Order[]
+  rating?: ProductRating[]
 }
Index: shared/util/api.util.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/util/api.util.ts b/shared/util/api.util.ts
new file mode 100644
--- /dev/null	(revision 738d93f45442a8b0c0282fa64861b2fe62cddbf3)
+++ b/shared/util/api.util.ts	(revision 738d93f45442a8b0c0282fa64861b2fe62cddbf3)
@@ -0,0 +1,7 @@
+import { Cookies } from 'react-cookie'
+import { tokenKey } from '@shared/constant'
+
+export const getBearerToken = () => {
+  const jwt = new Cookies().get(tokenKey)
+  return jwt && jwt
+}
Index: shared/util/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/util/index.ts b/shared/util/index.ts
new file mode 100644
--- /dev/null	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
+++ b/shared/util/index.ts	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
@@ -0,0 +1,2 @@
+export * from './api.util'
+export * from './router.util'
Index: shared/util/router.util.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/util/router.util.ts b/shared/util/router.util.ts
new file mode 100644
--- /dev/null	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/util/router.util.ts	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
@@ -0,0 +1,7 @@
+import router from 'next/router'
+
+export const pushUri = async (href: string, as?: string, shallow?: boolean) => {
+  await router.push(href, as, {
+    shallow,
+  })
+}
Index: src/schema.graphql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/schema.graphql b/shared/schema.graphql
rename from src/schema.graphql
rename to shared/schema.graphql
--- a/src/schema.graphql	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/shared/schema.graphql	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
@@ -406,6 +406,7 @@
 }
 
 type Query {
+  address(filterArgs: AddressFilterArgsInput, id: String!): Address!
   addresses(filterArgs: AddressFilterArgsInput): [Address!]!
   brands: [ProductBrand!]!
   categories: [ProductCategory!]!
@@ -443,6 +444,7 @@
   activated: DateTime
   activationToken: String
   address: [AddressInput!]
+  authExpiresAt: DateTime
   avatar: String
   creditCards: [CreditCardInput!]
   email: String!
@@ -619,6 +621,7 @@
   activated: DateTime
   activationToken: String
   address: [AddressInput!]
+  authExpiresAt: DateTime
   avatar: String
   created: DateTime
   creditCards: [CreditCardInput!]
@@ -640,6 +643,7 @@
   activated: DateTime
   activationToken: String
   address: [Address!]
+  authExpiresAt: DateTime
   avatar: String
   created: DateTime
   creditCards: [CreditCard!]
@@ -661,6 +665,7 @@
   activated: DateTime
   activationToken: String
   address: [AddressInput!]
+  authExpiresAt: DateTime
   avatar: String
   creditCards: [CreditCardInput!]
   email: String!
Index: src/features/account/views/account.view.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/features/account/views/account.view.tsx b/src/features/account/views/account.view.tsx
new file mode 100644
--- /dev/null	(revision d07ed01f3febb2390dc08d5005c315a4bdae67df)
+++ b/src/features/account/views/account.view.tsx	(revision d07ed01f3febb2390dc08d5005c315a4bdae67df)
@@ -0,0 +1,33 @@
+import { Container, H2 } from '@component'
+import { routeConfig, themeConfig } from '@shared/config'
+import { useCallback } from 'react'
+import { useRouter } from 'next/router'
+import { AccountAddress } from '@feature/address/components/view-address.component'
+import cn from 'classnames'
+//import { AccountNavigation } from '@feature/account/components/navigation.component'
+
+export const AccountView = () => {
+  const { pathname } = useRouter()
+  const isMainPage =
+    pathname === routeConfig.ACCOUNT.INDEX ||
+    pathname === routeConfig.ACCOUNT.ADDRESS.INDEX
+
+  const renderSection = useCallback(() => {
+    switch (pathname) {
+      case routeConfig.ACCOUNT.ADDRESS.INDEX:
+        return <AccountAddress />
+      default:
+        return <H2>MVP</H2>
+    }
+  }, [pathname])
+
+  return (
+    <Container className="flex-row min-h-[62rem]">
+      {/*{isMainPage && <AccountNavigation />}*/}
+      {!isMainPage && <div className="flex w-64 self-start"></div>}
+      <section className={cn('w-4/5 pl-5', themeConfig.boxMargin)}>
+        {renderSection()}
+      </section>
+    </Container>
+  )
+}
Index: src/features/account/components/Address/view-address.component.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/features/account/components/Address/view-address.component.tsx b/src/features/address/components/view-address.component.tsx
rename from src/features/account/components/Address/view-address.component.tsx
rename to src/features/address/components/view-address.component.tsx
--- a/src/features/account/components/Address/view-address.component.tsx	(revision b39c4634a155c42d6e4e97598eabb73dcd391405)
+++ b/src/features/address/components/view-address.component.tsx	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
@@ -1,31 +1,26 @@
-import { Button, H1, H2 } from '@src/components'
+import { H1, H2 } from '@component'
 import { useState } from 'react'
 import { useQuery } from '@apollo/client'
-import FetchCustomerAddresses from '@src/features/account/graphql/address/fetch-customer-addresses.graphql'
-import { Address, AddressType } from '@src/model/address.model'
+import FetchAddresses from '@feature/address/graphql/fetch-addresses.graphql'
+import { Address, AddressType } from '@shared/model'
 import {
   PencilSquareIcon as EditIcon,
   TrashIcon as DeleteIcon,
   CheckIcon as CheckIcon,
 } from '@heroicons/react/20/solid'
-import { themeConfig } from '@src/config/theme.config'
+import { routeConfig, themeConfig } from '@shared/config'
 import Link from 'next/link'
-import { routeConfig } from '@src/config/route.config'
 
 export const AccountAddress = () => {
   const [addresses, setAddressData] = useState<Address[]>([])
-  const [count, setCount] = useState<number>()
 
-  const { data, loading, error } = useQuery(FetchCustomerAddresses, {
+  const { data, loading, error } = useQuery(FetchAddresses, {
     variables: {
       filterArgs: {
         type: AddressType.SHIPPING,
       },
     },
-    onCompleted: response => {
-      setAddressData(response.addresses as Address[])
-      setCount(response.addresses?.length)
-    },
+    onCompleted: response => setAddressData(response.addresses as Address[]),
   })
 
   if (loading) return <H1>Loading</H1>
Index: src/features/auth/graphql/sign-in.graphql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/features/auth/graphql/sign-in.graphql b/src/features/auth/graphql/sign-in.graphql
--- a/src/features/auth/graphql/sign-in.graphql	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/src/features/auth/graphql/sign-in.graphql	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
@@ -6,6 +6,7 @@
       email
       phone
       avatar
+      authExpiresAt
     }
     accessToken
   }
Index: tailwind.config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tailwind.config.js b/tailwind.config.js
--- a/tailwind.config.js	(revision b82652797a3ab37d2ea4f841542f3b864d34ae3b)
+++ b/tailwind.config.js	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
@@ -3,7 +3,7 @@
   content: [
     './pages/**/*.{js,ts,jsx,tsx,mdx}',
     './src/**/*.{js,ts,jsx,tsx,mdx}',
-    './components/**/*.{js,ts,jsx,tsx,mdx}',
+    './shared/**/*.{js,ts,jsx,tsx,mdx}',
     './app/**/*.{js,ts,jsx,tsx,mdx}',
   ],
   theme: {
Index: pages/account/address/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/account/address/index.tsx b/pages/account/address/index.tsx
--- a/pages/account/address/index.tsx	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
+++ b/pages/account/address/index.tsx	(revision 738d93f45442a8b0c0282fa64861b2fe62cddbf3)
@@ -1,4 +1,4 @@
-import { AccountView } from '@src/features/account/views/account-view'
+import { AccountView } from '@feature/account/views/account.view'
 
 const AccountAddress = () => <AccountView />
 export default AccountAddress
Index: shared/constant.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/constant.ts b/shared/constant.ts
new file mode 100644
--- /dev/null	(revision 738d93f45442a8b0c0282fa64861b2fe62cddbf3)
+++ b/shared/constant.ts	(revision 738d93f45442a8b0c0282fa64861b2fe62cddbf3)
@@ -0,0 +1,2 @@
+export const tokenKey = 'token'
+export const tokenExpiresKey = 'tokenExpires'
Index: shared/hook/auth.hook.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/hook/auth.hook.ts b/shared/hook/auth.hook.ts
new file mode 100644
--- /dev/null	(revision 738d93f45442a8b0c0282fa64861b2fe62cddbf3)
+++ b/shared/hook/auth.hook.ts	(revision 738d93f45442a8b0c0282fa64861b2fe62cddbf3)
@@ -0,0 +1,20 @@
+import SignInMutation from '@feature/auth/graphql/sign-in.graphql'
+import { apolloClient } from '@shared/config'
+
+export const useAuthHook = () => {
+  const signIn = async ({
+    email,
+    password,
+  }: {
+    email: string
+    password: string
+  }) =>
+    await apolloClient.mutate({
+      mutation: SignInMutation,
+      variables: { data: { email, password } },
+    })
+
+  return {
+    signIn,
+  }
+}
Index: src/features/account/graphql/address/fetch-customer-addresses.graphql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/features/account/graphql/address/fetch-customer-addresses.graphql b/src/features/address/graphql/fetch-addresses.graphql
rename from src/features/account/graphql/address/fetch-customer-addresses.graphql
rename to src/features/address/graphql/fetch-addresses.graphql
--- a/src/features/account/graphql/address/fetch-customer-addresses.graphql	(revision daa2b4cde1f78cae233a52a9dc27eca25191096e)
+++ b/src/features/address/graphql/fetch-addresses.graphql	(revision 738d93f45442a8b0c0282fa64861b2fe62cddbf3)
@@ -1,4 +1,4 @@
-query FetchCustomerAddresses($filterArgs: AddressFilterArgsInput) {
+query FetchAddresses($filterArgs: AddressFilterArgsInput) {
   addresses(filterArgs: $filterArgs) {
     id
     companyName
Index: src/util/router.util.ts
===================================================================
diff --git a/src/util/router.util.ts b/src/util/router.util.ts
deleted file mode 100644
--- a/src/util/router.util.ts	(revision ba44c90943ecd6f8e47b0726a1a16434674bae58)
+++ /dev/null	(revision ba44c90943ecd6f8e47b0726a1a16434674bae58)
@@ -1,7 +0,0 @@
-import router from 'next/router'
-
-export const pushUri = async (href: string, as?: string, shallow?: boolean) => {
-  await router.push(href, as, {
-    shallow,
-  })
-}
diff --git a/src/@types/graphql.d.ts b/shared/@types/graphql.d.ts
rename from src/@types/graphql.d.ts
rename to shared/@types/graphql.d.ts
diff --git a/src/components/Branding/Social/InstagramIcon.tsx b/shared/component/Branding/Social/InstagramIcon.tsx
rename from src/components/Branding/Social/InstagramIcon.tsx
rename to shared/component/Branding/Social/InstagramIcon.tsx
diff --git a/src/components/Branding/Social/MetaIcon.tsx b/shared/component/Branding/Social/MetaIcon.tsx
rename from src/components/Branding/Social/MetaIcon.tsx
rename to shared/component/Branding/Social/MetaIcon.tsx
diff --git a/src/components/Branding/Social/WhatsappIcon.tsx b/shared/component/Branding/Social/WhatsappIcon.tsx
rename from src/components/Branding/Social/WhatsappIcon.tsx
rename to shared/component/Branding/Social/WhatsappIcon.tsx
diff --git a/src/components/Branding/constant.ts b/shared/component/Branding/constant.ts
rename from src/components/Branding/constant.ts
rename to shared/component/Branding/constant.ts
diff --git a/src/components/Form/Form.tsx b/shared/component/Form/Form.tsx
rename from src/components/Form/Form.tsx
rename to shared/component/Form/Form.tsx
diff --git a/src/components/Form/FormSub.tsx b/shared/component/Form/FormSub.tsx
rename from src/components/Form/FormSub.tsx
rename to shared/component/Form/FormSub.tsx
diff --git a/src/components/Form/FormTitle.tsx b/shared/component/Form/FormTitle.tsx
rename from src/components/Form/FormTitle.tsx
rename to shared/component/Form/FormTitle.tsx
diff --git a/src/components/Form/Group.tsx b/shared/component/Form/Group.tsx
rename from src/components/Form/Group.tsx
rename to shared/component/Form/Group.tsx
diff --git a/src/components/Notification.tsx b/shared/component/Notification.tsx
rename from src/components/Notification.tsx
rename to shared/component/Notification.tsx
diff --git a/src/util/has-hydrated.hook.tsx b/shared/hook/has-hydrated.hook.tsx
rename from src/util/has-hydrated.hook.tsx
rename to shared/hook/has-hydrated.hook.tsx
diff --git a/src/models/base.model.ts b/shared/model/base.model.ts
rename from src/models/base.model.ts
rename to shared/model/base.model.ts
diff --git a/src/service/product/graphql/fetch-products.graphql b/src/features/product/graphql/fetch-products.graphql
rename from src/service/product/graphql/fetch-products.graphql
rename to src/features/product/graphql/fetch-products.graphql
